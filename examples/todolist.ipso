not : Bool -> Bool
not a = if a then false else true

and : Bool -> Bool -> Bool
and a b = if a then b else false

strip : String -> String
strip = filterString (\c -> not (eqChar c '\n'))

parseCommand : String -> < Quit : () | Help : () | Add : String | Invalid : String >
parseCommand line =
  (\lines ->
    if and (eqInt (lengthArray lines) 1) (eqString (indexArray 0 lines) "quit") then Quit ()
    else if and (eqInt (lengthArray lines) 1) (eqString (indexArray 0 lines) "help") then Help ()
    else if and (eqInt (lengthArray lines) 2) (eqString (indexArray 0 lines) "add") then Add (indexArray 1 lines)
    else Invalid line
  ) (splitString ' ' (strip line))

runCommand : < Quit : () | Help : () | Invalid : String > -> IO < Continue : () | Quit : () >
runCommand cmd =
  case cmd of
    Quit x -> 
      pureIO (Quit ())
    Help x -> 
      bindIO (writeStdout stdout (toUtf8 "help - display this message\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "quit - exit the application\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "list - display the todolist\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "add STRING - add a task to the list\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "delete INT - delete a task from the list\n")) (\_ ->
        pureIO (Continue ())
      )))))
    Invalid x -> 
      mapIO 
        (\_ -> Continue ()) 
        (writeStdout stdout (toUtf8 "error: invalid command \"$x\"\n"))

loop : IO ()
loop =
  bindIO (writeStdout stdout (toUtf8 "> ")) (\_ ->
  bindIO (readLineStdin stdin) (\line ->
  bindIO (runCommand (parseCommand line)) (\next ->
    case next of
      Continue x -> loop
      Quit x -> pureIO ()
  )))

main : IO ()
main = 
  bindIO (writeStdout stdout (toUtf8 "Welcome to your TODO list\n")) (\_ -> loop)