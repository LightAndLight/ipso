deleteAt : Int -> Array a -> Array a
deleteAt target arr =
  if target < array.length arr
  then
    array.generate
      (array.length arr - 1)
      (\ix ->
        if ix < target
        then array.get! ix arr
        else array.get! (ix + 1) arr
      )
  else arr

parseCommand :
  String ->
  (|
    Quit : (),
    Help : (),
    Add : String,
    List : (),
    Delete : Int,
    Invalid : String
  |)
parseCommand line =
  let trimmed = string.trim line in
  let lines = string.partsc ' ' trimmed in

  # Needs https://github.com/LightAndLight/ipso/issues/354
  if array.length lines == 1 && array.get! 0 lines == "quit" then Quit ()
  else if array.length lines == 1 && array.get! 0 lines == "help" then Help ()
  else if array.length lines == 1 && array.get! 0 lines == "list" then List ()
  else if array.length lines == 2 && array.get! 0 lines == "add" then Add (array.get! 1 lines)
  else if array.length lines == 2 && array.get! 0 lines == "delete" then
    case int.parseDec (array.get! 1 lines) of
      None () -> Invalid trimmed
      Some n -> Delete n
  else Invalid trimmed

writeTodos : Array String -> IO ()
writeTodos todos =
  case todos of
    [] ->
      println "nothing to do"
    _ ->
      array.foldl
        (\acc todo ->
          comp
            acc
            println todo
        )
        (io.pure ())
        todos

runCommand :
  (| Quit : (), Help : (), Add : String, List : (), Delete : Int, Invalid : String |) ->
  Array String ->
  IO (| Continue : Array String, Quit : () |)
runCommand cmd todos =
  case cmd of
    Quit () ->
      io.pure (Quit ())
    Help () ->
      comp
        println "help - display this message"
        println "quit - exit the application"
        println "list - display the todolist"
        println "add STRING - add a task to the list"
        println "delete INT - delete a task from the list"
        io.pure (Continue todos)
    Add todo ->
      io.pure (Continue (array.snoc todos todo))
    List () ->
      io.map
        (\_ -> Continue todos)
        (writeTodos todos)
    Invalid line ->
      io.map
        (\_ -> Continue todos)
        (println "error: invalid command \"$line\"")
    Delete ix ->
      io.pure (Continue (deleteAt ix todos))

loop : Array String -> IO ()
loop todos =
  comp
    print "> "
    bind command <- io.map parseCommand readln
    bind next <- runCommand command todos
    case next of
      Continue newTodos -> loop newTodos
      Quit () -> io.pure ()

main : IO ()
main =
  comp
    println "Welcome to your TODO list"
    loop []