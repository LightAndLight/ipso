deleteAt : Int -> Array a -> Array a
deleteAt target arr =
  if target < array.length arr
  then
    array.generate
      (array.length arr - 1)
      (\ix ->
        if ix < target
        then array.index ix arr
        else array.index (ix + 1) arr
      )
  else arr

readDigit : Char -> (| Err : (), Ok : Int |)
readDigit c =
  case c of
    '0' -> Ok 0
    '1' -> Ok 1
    '2' -> Ok 2
    '3' -> Ok 3
    '4' -> Ok 4
    '5' -> Ok 5
    '6' -> Ok 6
    '7' -> Ok 7
    '8' -> Ok 8
    '9' -> Ok 9
    _ -> Err ()

readInt : String -> (| Err : (), Ok : Int |)
readInt str =
  case str of
    "" ->
      Err ()
    _ ->
      string.foldl
        (\acc el ->
          case acc of
            Err err -> Err err
            Ok val ->
              case readDigit el of
                Err err -> Err err
                Ok n -> Ok (10 * val + n)
        )
        (Ok 0)
        str

parseCommand :
  String ->
  (|
    Quit : (),
    Help : (),
    Add : String,
    List : (),
    Delete : Int,
    Invalid : String
  |)
parseCommand line =
  let trimmed = string.trim line in
  let lines = string.partsc ' ' trimmed in
  case lines of
    [command] ->
      case command of
        "quit" -> Quit ()
        "help" -> Help ()
        "list" -> List ()
        _ -> Invalid trimmed
    [command, argument] ->
      case command of
        "add" ->
          Add argument
        "delete" ->
          case readInt argument of
            Err () -> Invalid trimmed
            Ok n -> Delete n
        _ ->
          Invalid trimmed
    _ ->
      Invalid trimmed

writeTodos : Array String -> IO ()
writeTodos todos =
  case todos of
    [] ->
      println "nothing to do"
    _ ->
      array.foldl
        (\acc todo ->
          comp
            acc
            println todo
        )
        (io.pure ())
        todos

runCommand :
  (| Quit : (), Help : (), Add : String, List : (), Delete : Int, Invalid : String |) ->
  Array String ->
  IO (| Continue : Array String, Quit : () |)
runCommand cmd todos =
  case cmd of
    Quit () ->
      io.pure (Quit ())
    Help () ->
      comp
        println "help - display this message"
        println "quit - exit the application"
        println "list - display the todolist"
        println "add STRING - add a task to the list"
        println "delete INT - delete a task from the list"
        io.pure (Continue todos)
    Add todo ->
      io.pure (Continue (array.snoc todos todo))
    List () ->
      io.map
        (\_ -> Continue todos)
        (writeTodos todos)
    Invalid line ->
      io.map
        (\_ -> Continue todos)
        (println "error: invalid command \"$line\"")
    Delete ix ->
      io.pure (Continue (deleteAt ix todos))

loop : Array String -> IO ()
loop todos =
  comp
    print "> "
    bind line <- readln
    bind next <- runCommand (parseCommand line) todos
    case next of
      Continue newTodos -> loop newTodos
      Quit () -> io.pure ()

main : IO ()
main =
  comp
    println "Welcome to your TODO list"
    loop []