parseDigit : Char -> (| Err, Ok(Int) |)
parseDigit c =
  case c of
    '0' -> Ok(0)
    '1' -> Ok(1)
    '2' -> Ok(2)
    '3' -> Ok(3)
    '4' -> Ok(4)
    '5' -> Ok(5)
    '6' -> Ok(6)
    '7' -> Ok(7)
    '8' -> Ok(8)
    '9' -> Ok(9)
    _ -> Err

parseInt : String -> (| Err, Ok(Int) |)
parseInt str =
  if str == ""
  then Err
  else
    string.foldl
      (\acc el ->
        case acc of
          Err -> Err
          Ok(val) ->
            case parseDigit el of
              Err -> Err
              Ok(n) -> Ok(10 * val + n)
      )
      Ok(0)
      str

type Command = (|
  Quit,
  Help,
  List,
  Add{ item : String },
  Delete{ index : Int },
  Invalid{ input : String }
|)

parseCommand :
  String ->
  Command
parseCommand line =
  let stripped = string.rstrip line in
  case string.split " " stripped of
    ["quit"] -> Quit
    ["help"] -> Help
    ["list"] -> List
    ["add", item] -> Add{ item }
    ["delete", value] ->
      case parseInt value of
        Err -> Invalid{ input = stripped }
        Ok(index) -> Delete{ index }
    _ -> Invalid{ input = stripped }

writeTodos : Array String -> IO ()
writeTodos todos =
  if todos == []
  then println "nothing to do"
  else
    array.foldl
      (\acc todo ->
        comp
          acc
          println todo
      )
      (io.pure ())
      todos

runCommand :
  Command ->
  Array String ->
  IO (| Continue{ todos : Array String }, Quit |)
runCommand cmd todos =
  case cmd of
    Quit ->
      io.pure Quit
    Help ->
      comp
        println "help - display this message"
        println "quit - exit the application"
        println "list - display the todolist"
        println "add STRING - add a task to the list"
        println "delete INT - delete a task from the list"
        io.pure Continue{ todos }
    Add{ item } ->
      io.pure Continue{ todos = array.snoc todos item }
    List ->
      comp
        writeTodos todos
        io.pure Continue{ todos }
    Invalid{ input } ->
      comp
        println "error: invalid command \"$input\""
        io.pure Continue{ todos }
    Delete{ index } ->
      io.pure Continue{ todos = array.delete index todos }

loop : Array String -> IO ()
loop todos =
  comp
    print "> "
    bind line <- readln
    bind next <- runCommand (parseCommand line) todos
    case next of
      Continue{ todos = newTodos } -> loop newTodos
      Quit -> io.pure ()

main : IO ()
main =
  comp
    println "Welcome to your TODO list"
    loop []