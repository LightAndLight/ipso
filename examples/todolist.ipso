not : Bool -> Bool
not a = if a then false else true

and : Bool -> Bool -> Bool
and a b = if a then b else false

strip : String -> String
strip = filterString (\c -> not (eqChar c '\n'))

readDigit : Char -> < Err : () | Ok : Int >
readDigit c =
  if eqChar c '0' then Ok 0
  else if eqChar c '1' then Ok 1
  else if eqChar c '2' then Ok 2
  else if eqChar c '3' then Ok 3
  else if eqChar c '4' then Ok 4
  else if eqChar c '5' then Ok 5
  else if eqChar c '6' then Ok 6
  else if eqChar c '7' then Ok 7
  else if eqChar c '8' then Ok 8
  else if eqChar c '9' then Ok 9
  else Err ()

readInt : String -> < Err : () | Ok : Int >
readInt str = 
  if eqString "" str
  then Err ()
  else
    foldlString 
      (\acc el -> 
        case acc of
          Err err -> Err err
          Ok val ->
            case readDigit el of
              Err err -> Err err
              Ok n -> Ok (add (multiply 10 val) n)
      )
      (Ok 0)
      str

parseCommand : 
  String -> 
  < Quit : () 
  | Help : () 
  | Add : String 
  | List : () 
  | Delete : Int 
  | Invalid : String 
  >
parseCommand line =
  (\stripped ->
    (\lines ->
      if and (eqInt (lengthArray lines) 1) (eqString (indexArray 0 lines) "quit") then Quit ()
      else if and (eqInt (lengthArray lines) 1) (eqString (indexArray 0 lines) "help") then Help ()
      else if and (eqInt (lengthArray lines) 1) (eqString (indexArray 0 lines) "list") then List ()
      else if and (eqInt (lengthArray lines) 2) (eqString (indexArray 0 lines) "add") then Add (indexArray 1 lines)
      else if and (eqInt (lengthArray lines) 2) (eqString (indexArray 0 lines) "delete") then 
        case readInt (indexArray 1 lines) of
          Err err -> Invalid stripped
          Ok n -> Delete n
      else Invalid stripped
    ) (splitString ' ' stripped)
  ) (strip line)

runCommand : < Quit : () | Help : () | Invalid : String | r > -> IO < Continue : () | Quit : () >
runCommand cmd =
  case cmd of
    Quit x -> 
      pureIO (Quit ())
    Help x -> 
      bindIO (writeStdout stdout (toUtf8 "help - display this message\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "quit - exit the application\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "list - display the todolist\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "add STRING - add a task to the list\n")) (\_ ->
      bindIO (writeStdout stdout (toUtf8 "delete INT - delete a task from the list\n")) (\_ ->
        pureIO (Continue ())
      )))))
    Invalid x -> 
      mapIO 
        (\_ -> Continue ()) 
        (writeStdout stdout (toUtf8 "error: invalid command \"$x\"\n"))
    _ ->
      mapIO 
        (\_ -> Continue ()) 
        (writeStdout stdout (toUtf8 "\n"))

loop : IO ()
loop =
  bindIO (writeStdout stdout (toUtf8 "> ")) (\_ ->
  bindIO (readLineStdin stdin) (\line ->
  bindIO (runCommand (parseCommand line)) (\next ->
    case next of
      Continue x -> loop
      Quit x -> pureIO ()
  )))

main : IO ()
main = 
  bindIO (writeStdout stdout (toUtf8 "Welcome to your TODO list\n")) (\_ -> loop)